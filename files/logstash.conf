input {
  lumberjack {
    port => 5000
    ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
  }
}
filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_ho
stname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}
" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
   grok {
       match   => [ "message", "haproxy" ]
       add_tag => "syslog_haproxy"
     }
   grok {
       match   => [ "message", "logstash-forwarder" ]
       add_tag => "syslog_logstash_forwarder"
   }
    mutate {
      replace => ["host", "%{host}"]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      remove_field => ["timestamp"]
    }
    date {
      match => ["timestamp8601", "ISO8601"]
      remove_field => ["timestamp8601"]
    }
    if "syslog_haproxy" or "syslog_logstash_forwarder" in [tags] {
        mutate {
           remove_tag => "_grokparsefailure"
        }
    }
  }
}
filter {
  if [type] == "mongodb" {
     grok {
       match   => { "message" => "%{GREEDYDATA} \[conn%{NUMBER:mongoConnection}\] %{WORD:mongoCommand} %{WORD:mongoDatabase}.%{NOTSPACE:mongoCollection} %{WORD}: \{ %{GREEDYDATA:mongoStatement} \} %{GREEDYDATA} %{NUMBER:mongoElapsedTime:int}ms" }
       add_tag => "mongodb"
     }
     grok {
       match   => [ "message", "cursorid:%{NUMBER:mongoCursorId}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "ntoreturn:%{NUMBER:mongoNumberToReturn:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "ntoskip:%{NUMBER:mongoNumberToSkip:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "nscanned:%{NUMBER:mongoNumberScanned:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "scanAndOrder:%{NUMBER:mongoScanAndOrder:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "idhack:%{NUMBER:mongoIdHack:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "nmoved:%{NUMBER:mongoNumberMoved:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "nupdated:%{NUMBER:mongoNumberUpdated:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "keyUpdates:%{NUMBER:mongoKeyUpdates:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "numYields: %{NUMBER:mongoNumYields:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "locks\(micros\) r:%{NUMBER:mongoReadLocks:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "locks\(micros\) w:%{NUMBER:mongoWriteLocks:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "nreturned:%{NUMBER:mongoNumberReturned:int}" ]
       add_tag => "mongo_profiling_data"
     }
     grok {
       match   => [ "message", "reslen:%{NUMBER:mongoResultLen=>h:int}" ]
       add_tag => "mongo_profiling_data"
     }
     if "mongo_profiling_data" in [tags] {
        mutate {
           remove_tag => "_grokparsefailure"
        }
     }
     if  "_grokparsefailure" in [tags] {
        drop { }
     }
  }
}
filter {
  if [type] == "nginx-access" {
    grok {
      match =>  [
       "message", "%{HAPROXYHTTP}"
      ]
      add_tag => "nginx"
    }
      mutate {
        replace => ["host", "%{host}"]
    }
    date {
      locale => "en"
      match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z" ]
    }
   if "nginx" in [tags] {
        mutate {
           remove_tag => "_grokparsefailure"
        }
     }
  }
}
filter {
  if [type] == "haproxy" {
    grok {
      match =>  [ 
       "message", "%{HAPROXYHTTP}"
       ]
      add_tag => "haproxy"
    }
  }
}

input {
  file {
    path => "/usr/local/nagios/var/nagios.log"
    type => "nagios"
   }
}

filter {
  if [type] == "nagios" {
    grok {
      match => [
      "message", "%{NAGIOSLOGLINE}"
      ]
      add_tag => "nagios"
   }
 }
}

output {
  elasticsearch {
     host => "localhost"
  }
  stdout { codec => rubydebug }
}
